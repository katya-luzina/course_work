import pymysql.cursors
import os
import mysql.connector
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="")
cur = conn.cursor()
cur.execute ("""USE orders;""")

def GetTicker ():
    print ('Сейчас Вам будет предложено ввести данные для заполнения книги заявок')
    correct = 0
    while correct == 0:
        seccode = input ('Введите тикер: ')
        cur.execute("SELECT count(*) FROM security_type WHERE (seccode = '"+ seccode +"');")
        if cur.fetchall() != [(0,)]:
            correct = 1
        else:
            print ('Вы ввели некорректный тикер. Повторите ввод')
    return(seccode)

def GetTime():
    print('Сейчас Вам будет предложено ввести окончание периода анализа')
    correct = 0
    while correct == 0:
        moment = int(input ('Введите момент времени (момент времени должен быть записан в формате HHMMSSQQQ): '))
        if int(moment) in range(100000000,235959999):
            correct = 1
        else:
            print ('Вы ввели некорректный момент времени. Повторите ввод')
    return(moment)

def DefineTable(seccode):
    cur.execute("SELECT instrument_type FROM security_type WHERE (seccode = '%s');" %(ticker))
    if cur.fetchall() == [('ordinary share',)]:
        table = 'ordshares'
    else:
        cur.execute("SELECT instrument_type FROM security_type WHERE (seccode = '%s');" % (ticker))
        if cur.fetchall() == [('preffered share',)]:
            table = 'prefshares'
        else:
            table = 'bonds'
    return(table)

def ReverseToDatetime(date, ordertime):
    hh24 = ordertime//10000000 # выделяем разряды, соответствующие часам
    mi = ordertime//100000%100 # выделяем разряды, соответствующие минутам
    ss = ordertime//1000%100 # выделяем разряды, соответствующие секундам
    ff3 = ordertime%1000 # выделяем разряды, соответствующие микросекундам
    reversed_time = datetime.strptime(date + ' ' + str(hh24) + ':' + str(mi) + ':' + str(ss) + ',' + str(ff3), '%d.%m.%Y %H:%M:%S,%f') #переводим строку в формат времени для python
    return(reversed_time)

def DefineMinStep(seccode):
    cur.execute("SELECT min_step FROM security WHERE (seccode = '%s');" %(ticker))
    min_step = cur.fetchall()[0][0]
    return(min_step)

def GlassBuild(wait_list):                       
    glass = []
    for wait in wait_list:
            # если в стакане уже есть заявки, то изменяем существующие записи в стакане
            if len(glass) != 0:
                # вводим признак существования в стакане соответствующей пары направление-цена
                flag = False
                # движение построчно по стакану
                for level in glass:
                    # если в стакане найден уровень с соответствующей парой направление-цена, добавляем к нему объем
                    if level [0] == wait[0] and level[1] == wait[3]:
                        level[2] += wait[4]
                        flag = True
                        break
                # если в стакане не найдена соотв пара направление-цена, добавляем новую пару направление-цена
                if not flag:
                    glass.append([wait[0], wait[3], wait[4]])
            # если в стакане еще нет ни одной записи, то добавляем первую запись в стакан
            else:
                glass.append([wait[0], wait[3], wait[4]])
    glass_new = []
    for level in glass:
        if level[2] != 0:
            glass_new.append([level[0], level[1], level[2]])
    # строим стакан и упорядочиваем объекты по убыванию цены
    df = pd.DataFrame.from_records(glass_new, columns=['buysell', 'price', 'volume'])
    df.sort_values('price', inplace = True, ascending = True)
    df['volume_buy'] = np.where (df ['buysell'] == 'B', df['volume'], 0)
    df['volume_sell'] = np.where (df ['buysell'] == 'S', df['volume'], 0)
    del df['buysell']
    del df['volume']
    df['counter'] = range(len(df))
    df = df[['counter','volume_buy','price','volume_sell']]
    return(df)

def MetricsCount(glass):
    best_buy = glass.query ('volume_buy != 0').max()[2]
    best_sell = glass.query ('volume_sell != 0').min()[2]
    midpoint = (best_buy + best_sell)/2
    bid_ask_spread = best_buy - best_sell
    depth_buy = glass.query ('volume_buy != 0 & price == @best_buy').max()[1]
    depth_sell = glass.query ('volume_sell != 0 & price == @best_sell').min()[3]
    return(best_buy, best_sell, midpoint, bid_ask_spread, depth_buy, depth_sell)
    
def NeedToAppendMetrics(prev_best_buy, prev_best_sell, prev_depth_buy, prev_depth_sell, wait_list):
    flag = 'No'
    metrics_temp = MetricsCount(GlassBuild(wait_list))
    if (prev_best_buy != metrics_temp[0] or prev_best_sell != metrics_temp[1] or prev_depth_buy != metrics_temp[4] or prev_depth_sell != metrics_temp[5] ) and metrics_temp[3] > 0:
        flag = 'Yes'
    return(flag, metrics_temp)
    
ticker = GetTicker()
time = GetTime()
table = DefineTable(ticker)
min_step = DefineMinStep(ticker)

# Этап 1 - определяем состояние стакана на момент времени 10:00:00,000 на основании всех заявок, неисполненных в период аукциона открытия
if table == 'ordshares':
    cur.execute("SELECT * from ordshares WHERE (seccode = '%s') and (ordertime = '100000000');" % (ticker))
elif table == 'prefshares':
    cur.execute("SELECT * from prefshares WHERE (seccode = '%s') and (ordertime = '100000000');" % (ticker))
else:
    cur.execute("SELECT * from bonds WHERE (seccode = '%s') and (ordertime = '100000000');" % (ticker))

# 1.0 формируем очередь заявок
rows = cur.fetchall()
date = '01.09.2015'
wait_list = []
for elem in rows:
    # отбираем нерыночные заявки
    if elem[6] != 0:
        if elem[2] == 'B':
            delta_pricetick = (metrics[-1][3] - elem[6])/min_step
            wait_list.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], elem[6], elem[7], delta_pricetick, ReverseToDatetime(date, 0)])
        else:
            delta_pricetick = (elem[6] - metrics[-1][4])/min_step
            wait_list.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], elem[6], elem[7], delta_pricetick, ReverseToDatetime(date, 0)])
# 1.1 строим стакан
glass = GlassBuild(wait_list)

# 1.2 рассчитываем метрики первоначального состояния стакана
metrics = []
metrics_temp = MetricsCount(glass)
metrics.append(['-',ReverseToDatetime(date, 100000000),'-', metrics_temp[0], metrics_temp[1], metrics_temp[2], metrics_temp[3], metrics_temp[4], metrics_temp[5], '-', '1'])

# Этап 2 - обновляем очередь заявок + строим стакан + рассчитываем метрики в случае необходимости (обновились best_ask и best_bid или произошла сделка)
if table == 'ordshares':
    cur.execute("SELECT * from ordshares WHERE (seccode = '%s') and (ordertime > '100000000') and (ordertime <= '%s');" % (ticker, time))
elif table == 'prefshares':
    cur.execute("SELECT * from prefshares WHERE (seccode = '%s') and (ordertime > '100000000') and (ordertime <= '%s');" % (ticker, time))
else:
    cur.execute("SELECT * from bonds WHERE (seccode = '%s') and (ordertime > '100000000') and (ordertime <= '%s');" % (ticker, time))
    
# Этап 2 - обновляем очередь заявок + строим стакан + рассчитываем метрики в случае необходимости (обновились best_ask и best_bid или произошла сделка)
if table == 'ordshares':
    cur.execute("SELECT * from ordshares WHERE (seccode = '%s') and (ordertime > '100000000') and (ordertime <= '%s');" % (ticker, time))
elif table == 'prefshares':
    cur.execute("SELECT * from prefshares WHERE (seccode = '%s') and (ordertime > '100000000') and (ordertime <= '%s');" % (ticker, time))
else:
    cur.execute("SELECT * from bonds WHERE (seccode = '%s') and (ordertime > '100000000') and (ordertime <= '%s');" % (ticker, time))
    
# 2.0 обновляем очередь заявок
rows = cur.fetchall()
iceberg = []
date = '01.09.2015'
for elem in rows:
    # апдейтим очередь заявок
    # отбираем нерыночные заявки
    if elem[6] != 0:
        # если action = 1 (выставление заявки), то добавляем такую заявку в очередь
        if elem[5] == '1':
            # определяем место выставления заявки
            if elem[2] == 'B':
                delta_pricetick = (metrics[-1][3] - elem[6])/min_step
                wait_list.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], elem[6], elem[7], delta_pricetick, ReverseToDatetime(date, 0)])
                flag = NeedToAppendMetrics(metrics[-1][3], metrics[-1][4], metrics[-1][7], metrics[-1][8], wait_list)
                if flag[0] == 'Yes':
                    metrics.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], flag[1][0],flag[1][1],flag[1][2],flag[1][3],flag[1][4],flag[1][5],delta_pricetick,'1'])
            else:
                delta_pricetick = (elem[6] - metrics[-1][4])/min_step
                wait_list.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], elem[6], elem[7], delta_pricetick, ReverseToDatetime(date, 0)])
                flag = NeedToAppendMetrics(metrics[-1][3], metrics[-1][4], metrics[-1][7], metrics[-1][8], wait_list)
                if flag[0] == 'Yes':
                    metrics.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], flag[1][0],flag[1][1],flag[1][2],flag[1][3],flag[1][4],flag[1][5],delta_pricetick,'1'])
        # если action = 0 (отмена), то ищем эту заявку и удаляем ее из wait_list
        elif elem[5] == '0':
            # ищем заявку с соответствующим номером
            for wait in wait_list:
                if elem[4] == wait[2]:
                    wait_list.remove(wait)
                    flag = NeedToAppendMetrics(metrics[-1][3], metrics[-1][4], metrics[-1][7], metrics[-1][8], wait_list)
                    if flag[0] == 'Yes':
                        metrics.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], flag[1][0], flag[1][1], flag[1][2], flag[1][3], flag[1][4], flag[1][5], wait[5], '0'])
        # если action = 2 (исполнение), то ищем эту заявку и проверяем, как она исполнилась
        elif elem[5] == '2':
            # ищем заявку с соответствующим номером
            for wait in wait_list:
                if elem[4] == wait[2]:
                    wait[4] -= elem [7]
                    if wait[4] < 0:
                        wait[6] = ReverseToDatetime(date, elem[3]) # указываем время исполнения заявки
                        iceberg.append([wait[0],wait[1],wait[2],wait[3],abs(wait[4]-elem[7]),wait[5],wait[6]])
                        wait_list.remove(wait)
                        flag = NeedToAppendMetrics(metrics[-1][3], metrics[-1][4], metrics[-1][7], metrics[-1][8], wait_list)
                        if flag[0] == 'Yes':
                            metrics.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], flag[1][0],flag[1][1],flag[1][2],flag[1][3],flag[1][4],flag[1][5],wait[5],'2'])
                    elif wait[4] == 0:
                        wait_list.remove(wait)
                        flag = NeedToAppendMetrics(metrics[-1][3], metrics[-1][4], metrics[-1][7], metrics[-1][8], wait_list)
                        if flag[0] == 'Yes':
                            metrics.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], flag[1][0],flag[1][1],flag[1][2],flag[1][3],flag[1][4],flag[1][5],wait[5],'2'])
                    elif wait[4] > 0:
                        flag = NeedToAppendMetrics(metrics[-1][3], metrics[-1][4], metrics[-1][7], metrics[-1][8], wait_list)
                        if flag[0] == 'Yes':
                            metrics.append([elem[2], ReverseToDatetime(date, elem[3]), elem[4], flag[1][0],flag[1][1],flag[1][2],flag[1][3],flag[1][4],flag[1][5],wait[5],'2'])
                            
df_metrics = pd.DataFrame.from_records(metrics, columns = ['buysell', 'place_time', 'orderno', 'bestbuy','bestsell','midpoint','bid_ask_spread','depth_buy','depth_sell', 'delta_pricetick', 'action'])
df_metrics

df_iceberg = pd.DataFrame.from_records(iceberg, columns=['buysell','time_placed', 'orderno', 'price', 'volume', 'delta_pricetick', 'time_executed'])
df_iceberg
